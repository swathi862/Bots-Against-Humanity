// <auto-generated />
using System;
using CardGame.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CardGame.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200929141448_AddedSeedData")]
    partial class AddedSeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CardGame.Models.AnswerCard", b =>
                {
                    b.Property<int>("AnswerCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeckId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PointValue")
                        .HasColumnType("int");

                    b.HasKey("AnswerCardId");

                    b.HasIndex("DeckId");

                    b.ToTable("AnswerCard");
                });

            modelBuilder.Entity("CardGame.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "000000001",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6dc31f34-7535-40b6-a725-6288e56a155c",
                            Email = "swathi@email.com",
                            EmailConfirmed = true,
                            FirstName = "Swathi",
                            LastName = "Mukkamala",
                            LockoutEnabled = false,
                            NormalizedEmail = "SWATHI@EMAIL.COM",
                            NormalizedUserName = "SWATHI86",
                            PasswordHash = "AQAAAAEAACcQAAAAECh5+i57I8CEP3n8DdeTqRq+s5nQpO6xRH2HKQGkGSKSxP614PXi/DqIfGSKh9NYAw==",
                            PhoneNumberConfirmed = false,
                            Score = 0,
                            SecurityStamp = "4e4e4005-ffe8-4f4a-91e0-91683d32a93d",
                            TwoFactorEnabled = false,
                            UserName = "Swathi86"
                        });
                });

            modelBuilder.Entity("CardGame.Models.Deck", b =>
                {
                    b.Property<int>("DeckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("DeckId");

                    b.ToTable("Deck");

                    b.HasData(
                        new
                        {
                            DeckId = 1,
                            Name = "Starter Deck",
                            Price = 0
                        },
                        new
                        {
                            DeckId = 2,
                            Name = "Just Office Things",
                            Price = 15
                        },
                        new
                        {
                            DeckId = 3,
                            Name = "Disney Villains",
                            Price = 45
                        },
                        new
                        {
                            DeckId = 4,
                            Name = "Illnesses and Ailments",
                            Price = 95
                        },
                        new
                        {
                            DeckId = 5,
                            Name = "Quintessential Horror Movie Scenes",
                            Price = 155
                        });
                });

            modelBuilder.Entity("CardGame.Models.PurchasedDeck", b =>
                {
                    b.Property<int>("PurchasedDeckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeckId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PurchasedDeckId");

                    b.HasIndex("DeckId");

                    b.HasIndex("UserId1");

                    b.ToTable("PurchasedDeck");
                });

            modelBuilder.Entity("CardGame.Models.QuestionCard", b =>
                {
                    b.Property<int>("QuestionCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionCardId");

                    b.ToTable("QuestionCard");

                    b.HasData(
                        new
                        {
                            QuestionCardId = 1,
                            Description = "This is your captain speaking. Fasten your seatbelts and prepare for"
                        },
                        new
                        {
                            QuestionCardId = 2,
                            Description = "What really brings out the child in me?"
                        },
                        new
                        {
                            QuestionCardId = 3,
                            Description = "What did The Rock eat for dinner?"
                        },
                        new
                        {
                            QuestionCardId = 4,
                            Description = "My gym teacher got fired for adding _______ to the obstacle course."
                        },
                        new
                        {
                            QuestionCardId = 5,
                            Description = "What did I give up for Lent?"
                        },
                        new
                        {
                            QuestionCardId = 6,
                            Description = "The class field trip was completely ruined by _______."
                        },
                        new
                        {
                            QuestionCardId = 7,
                            Description = "This is the prime of my life. I'm young, hot, and full of ___________."
                        },
                        new
                        {
                            QuestionCardId = 8,
                            Description = "I learned the hard way that you can't cheer up a grieving friend with ___________."
                        },
                        new
                        {
                            QuestionCardId = 9,
                            Description = "I'm not like the rest of you. I'm too rich and busy for _________."
                        },
                        new
                        {
                            QuestionCardId = 10,
                            Description = "What are all those chipmunks singing about?"
                        },
                        new
                        {
                            QuestionCardId = 11,
                            Description = "___________: kid-tested, mother-approved"
                        },
                        new
                        {
                            QuestionCardId = 12,
                            Description = "Science will never explain ___________."
                        },
                        new
                        {
                            QuestionCardId = 13,
                            Description = "West Virginia runs on __________."
                        },
                        new
                        {
                            QuestionCardId = 14,
                            Description = "I've got 99 problems but ___________ ain't one."
                        },
                        new
                        {
                            QuestionCardId = 15,
                            Description = "What's that sound?"
                        },
                        new
                        {
                            QuestionCardId = 16,
                            Description = "What's a girl's best friend?"
                        },
                        new
                        {
                            QuestionCardId = 17,
                            Description = "_________. That's how I want to die."
                        },
                        new
                        {
                            QuestionCardId = 18,
                            Description = "I'm sorry, Professor, but I couldn't complete my homework because of __________."
                        },
                        new
                        {
                            QuestionCardId = 19,
                            Description = "Sorry I'm late! I was ____________."
                        },
                        new
                        {
                            QuestionCardId = 20,
                            Description = "Breaking News: ____________."
                        },
                        new
                        {
                            QuestionCardId = 21,
                            Description = "I'm thinking about getting a lower-back tattoo of _________."
                        },
                        new
                        {
                            QuestionCardId = 22,
                            Description = "Love is patient. Love is kind. Love is __________."
                        },
                        new
                        {
                            QuestionCardId = 23,
                            Description = "What ended my last relationship?"
                        },
                        new
                        {
                            QuestionCardId = 24,
                            Description = "Before I run for president, I must destroy all evidence of my involvement with __________."
                        },
                        new
                        {
                            QuestionCardId = 25,
                            Description = "____________. Awesome in theory, kind of a mess in practice."
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CardGame.Models.AnswerCard", b =>
                {
                    b.HasOne("CardGame.Models.Deck", "Deck")
                        .WithMany("AnswerCards")
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CardGame.Models.PurchasedDeck", b =>
                {
                    b.HasOne("CardGame.Models.Deck", "Deck")
                        .WithMany("PurchasedDeck")
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardGame.Models.ApplicationUser", "User")
                        .WithMany("PurchasedDecks")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CardGame.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CardGame.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardGame.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CardGame.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
